{"version":3,"file":"static/js/572.ff01bbdd.chunk.js","mappings":"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","sources":["components/QuestionComponents/QuestionInput/interface.ts","components/QuestionComponents/QuestionInput/propComponent.tsx","components/QuestionComponents/QuestionInput/index.ts","components/QuestionComponents/QuestionInput/QuestionInput.tsx","components/QuestionComponents/QuestionTitle/interface.ts","components/QuestionComponents/QuestionTitle/propComponent.tsx","components/QuestionComponents/QuestionTitle/index.ts","components/QuestionComponents/QuestionTitle/QuestionTitle.tsx","components/QuestionComponents/QuestionParagraph/interface.ts","components/QuestionComponents/QuestionParagraph/propComponent.tsx","components/QuestionComponents/QuestionParagraph/index.ts","components/QuestionComponents/QuestionParagraph/Component.tsx","components/QuestionComponents/QuestionInfo/interface.ts","components/QuestionComponents/QuestionInfo/index.ts","components/QuestionComponents/QuestionInfo/propComponent.tsx","components/QuestionComponents/QuestionInfo/Component.tsx","components/QuestionComponents/QuestionTextarea/interface.ts","components/QuestionComponents/QuestionTextarea/index.ts","components/QuestionComponents/QuestionTextarea/propComponent.tsx","components/QuestionComponents/QuestionTextarea/Component.tsx","components/QuestionComponents/QuestionRadio/interface.ts","components/QuestionComponents/QuestionRadio/propComponent.tsx","components/QuestionComponents/QuestionRadio/index.ts","components/QuestionComponents/QuestionRadio/Component.tsx","components/QuestionComponents/QuestionRadio/StatComponent.tsx","components/QuestionComponents/QuestionCheckbox/interface.ts","components/QuestionComponents/QuestionCheckbox/StatComponent.tsx","components/QuestionComponents/QuestionCheckbox/index.ts","components/QuestionComponents/QuestionCheckbox/propComponent.tsx","components/QuestionComponents/QuestionCheckbox/Component.tsx","components/QuestionComponents/index.ts","hooks/useGetComponentInfo.ts","hooks/useGetPageInfo.ts","hooks/useLoadQuestionData.ts"],"sourcesContent":["export type QuestionInputPropsType = {\n  title?: string;\n  placeholder?: string;\n  onchange?: (newProps: QuestionInputPropsType) => void;\n  disabled?: boolean;\n};\n\nexport const QuestionInputDefaultProps: QuestionInputPropsType = {\n  title: \"输入标题\",\n  placeholder: \"请输入...\",\n};\n","import { Form, Input } from \"antd\";\nimport { QuestionInputPropsType } from \"./interface\";\nimport { useEffect } from \"react\";\n\nconst PropComponent = (props: QuestionInputPropsType) => {\n  const { title, placeholder, onchange, disabled } = props;\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({ title, placeholder });\n  }, [title, placeholder]);\n  function handleValueChange() {\n    if (onchange) {\n      onchange(form.getFieldsValue());\n    }\n  }\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ title, placeholder }}\n      onValuesChange={handleValueChange}\n      disabled={disabled}\n    >\n      <Form.Item\n        label=\"标题\"\n        name=\"title\"\n        rules={[{ required: true, message: \"请输入标题\" }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"placeholder\" name=\"placeholder\">\n        <Input />\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default PropComponent;\n","import QuestionInput from \"./QuestionInput\";\nimport { QuestionInputDefaultProps } from \"./interface\";\nimport PropComponent from \"./propComponent\";\nexport * from \"./interface\";\nconst QuestionInputConf = {\n  title: \"输入框\",\n  type: \"QuestionInput\",\n  PropComponent,\n  Component: QuestionInput,\n  defaultProps: QuestionInputDefaultProps,\n};\nexport default QuestionInputConf;\n","import Paragraph from \"antd/es/typography/Paragraph\";\nimport { QuestionInputDefaultProps, QuestionInputPropsType } from \"./interface\";\nimport Input from \"antd/es/input/Input\";\n\nconst QuestionInput = (props: QuestionInputPropsType) => {\n  const { title = \"\", placeholder = \"\" } = {\n    ...QuestionInputDefaultProps,\n    ...props,\n  };\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <div>\n        <Input placeholder={placeholder} />\n      </div>\n    </div>\n  );\n};\nexport default QuestionInput;","export type QuestionTitlePropsType = {\n  text?: String;\n  level?: 1 | 2 | 3 | 4 | 5;\n  isCenter?: boolean;\n  onchange?: (newProps: QuestionTitlePropsType) => void;\n  disabled?: boolean;\n};\nexport const QuestionTitleDefaultProps = {\n  text: \"标题\",\n  lever: 1,\n  isCenter: false,\n};\n","import { Checkbox, Form, Input, Select } from \"antd\";\nimport { useEffect } from \"react\";\nimport { QuestionTitlePropsType } from \"./interface\";\n\nconst PropComponent = (props: QuestionTitlePropsType) => {\n  const { text, level, isCenter, onchange, disabled } = props;\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({ text, level, isCenter });\n  }, [text, level, isCenter]);\n  function handleValueChange() {\n    if (onchange) {\n      onchange(form.getFieldsValue());\n    }\n  }\n  return (\n    <Form\n      layout=\"vertical\"\n      initialValues={{ text, level, isCenter }}\n      form={form}\n      onValuesChange={handleValueChange}\n      disabled={disabled}\n    >\n      <Form.Item\n        label=\"标题\"\n        name=\"text\"\n        rules={[{ required: true, message: \"请输入标题\" }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"层级\" name=\"level\">\n        <Select\n          options={[\n            {\n              value: 1,\n              text: 1,\n            },\n            {\n              value: 2,\n              text: 2,\n            },\n            {\n              value: 3,\n              text: 3,\n            },\n          ]}\n        ></Select>\n      </Form.Item>\n      <Form.Item name=\"isCenter\" valuePropName=\"checked\">\n        <Checkbox>居中</Checkbox>\n      </Form.Item>\n    </Form>\n  );\n};\nexport default PropComponent;\n","import QuestionTitle from \"./QuestionTitle\";\nimport { QuestionTitleDefaultProps } from \"./interface\";\nimport PropComponent from \"./propComponent\";\nexport * from \"./interface\";\nconst QuestionTitleConf = {\n  title: \"标题\",\n  type: \"QuestionTitle\",\n  PropComponent,\n  Component: QuestionTitle,\n  defaultProps: QuestionTitleDefaultProps,\n};\nexport default QuestionTitleConf;\n","import Title from \"antd/es/typography/Title\";\nimport { QuestionTitleDefaultProps, QuestionTitlePropsType } from \"./interface\";\n\nconst QuestionTitle = (props: QuestionTitlePropsType) => {\n  const {\n    text = \"\",\n    level = 1,\n    isCenter = false,\n  } = { ...QuestionTitleDefaultProps, ...props };\n\n  const genFontSize = (level: number) => {\n    switch (level) {\n      case 1:\n        return \"24px\";\n      case 2:\n        return \"20px\";\n      case 3:\n        return \"16px\";\n      case 4:\n        return \"14px\";\n      case 5:\n        return \"12px\";\n      default:\n        return \"16px\";\n    }\n  };\n  return (\n    <Title\n      level={level}\n      style={{\n        textAlign: isCenter ? \"center\" : \"start\",\n        marginBottom: 0,\n        fontSize: genFontSize(level),\n      }}\n    >\n      {text}\n    </Title>\n  );\n};\nexport default QuestionTitle;\n","export type QuestionParagraphType = {\n  text?: String;\n  isCenter?: boolean;\n\n  onchange?: (newProps: QuestionParagraphType) => void;\n  disabled?: boolean;\n};\nexport const QuestionParagraphDefaultProps: QuestionParagraphType = {\n  text: \"段落内容\",\n  isCenter: false,\n};\n","import { Checkbox, Form } from \"antd\";\nimport { useEffect } from \"react\";\nimport { QuestionParagraphType } from \"./interface\";\nimport TextArea from \"antd/es/input/TextArea\";\n\nconst PropComponent = (props: QuestionParagraphType) => {\n  const { text, isCenter, onchange, disabled } = props;\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({ text, isCenter });\n  }, [text, isCenter]);\n  function handleValueChange() {\n    if (onchange) {\n      onchange(form.getFieldsValue());\n    }\n  }\n  return (\n    <Form\n      layout=\"vertical\"\n      initialValues={{ text, isCenter }}\n      form={form}\n      onValuesChange={handleValueChange}\n      disabled={disabled}\n    >\n      <Form.Item\n        label=\"标题\"\n        name=\"text\"\n        rules={[{ required: true, message: \"请输入内容\" }]}\n      >\n        <TextArea />\n      </Form.Item>\n\n      <Form.Item name=\"isCenter\" valuePropName=\"checked\">\n        <Checkbox>居中</Checkbox>\n      </Form.Item>\n    </Form>\n  );\n};\nexport default PropComponent;\n","import Component from \"./Component\";\nimport { QuestionParagraphDefaultProps } from \"./interface\";\nimport PropComponent from \"./propComponent\";\nexport * from \"./interface\";\nconst QuestionParagraphConf = {\n  title: \"段落\",\n  type: \"QuestionParagraph\",\n  PropComponent,\n  Component,\n  defaultProps: QuestionParagraphDefaultProps,\n};\nexport default QuestionParagraphConf;\n","import Paragraph from \"antd/es/typography/Paragraph\";\nimport {\n  QuestionParagraphDefaultProps,\n  QuestionParagraphType,\n} from \"./interface\";\n\nconst Component = (props: QuestionParagraphType) => {\n  const { text = \"\", isCenter = false } = {\n    ...QuestionParagraphDefaultProps,\n    ...props,\n  };\n  // const t = text?.replaceAll(\"\\n\", \"<br>\");\n  const textList = text.split(\"\\n\");\n  return (\n    <Paragraph\n      style={{ textAlign: isCenter ? \"center\" : \"start\", marginBottom: 0 }}\n    >\n      {/* <span dangerouslySetInnerHTML={{ __html: t }}></span> */}\n      {textList.map((t, index) => (\n        <span key={index}>\n          {index > 0 && <br></br>}\n          {t}\n        </span>\n      ))}\n    </Paragraph>\n  );\n};\n\nexport default Component;\n","export type QuestionInfoPropsType = {\n  title?: string;\n  desc?: string;\n\n  onchange?: (newProps: QuestionInfoPropsType) => void;\n  disabled?: boolean;\n};\n\nexport const QuestionInfoDefaultProps: QuestionInfoPropsType = {\n  title: \"问卷标题\",\n  desc: \"问卷描述\",\n};\n","import Component from \"./Component\";\nimport { QuestionInfoDefaultProps } from \"./interface\";\nimport PropComponent from \"./propComponent\";\nexport * from \"./interface\";\nconst QuestionInfoConf = {\n  title: \"问卷标题\",\n  desc: \"问卷描述\",\n  type: \"QuestionInfo\",\n  PropComponent,\n  Component,\n  defaultProps: QuestionInfoDefaultProps,\n};\nexport default QuestionInfoConf;\n","import { Form, Input } from \"antd\";\nimport { useEffect } from \"react\";\nimport { QuestionInfoPropsType } from \"./interface\";\nimport TextArea from \"antd/es/input/TextArea\";\n\nconst PropComponent = (props: QuestionInfoPropsType) => {\n  const { title, desc, onchange, disabled } = props;\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({ title, desc });\n  }, [title, desc]);\n  function handleValueChange() {\n    if (onchange) {\n      onchange(form.getFieldsValue());\n    }\n  }\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ title, desc }}\n      onValuesChange={handleValueChange}\n      disabled={disabled}\n    >\n      <Form.Item\n        label=\"标题\"\n        name=\"title\"\n        rules={[{ required: true, message: \"请输入标题\" }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"描述\" name=\"desc\">\n        <TextArea></TextArea>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default PropComponent;\n","import Paragraph from \"antd/es/typography/Paragraph\";\nimport { QuestionInfoDefaultProps, QuestionInfoPropsType } from \"./interface\";\nimport Title from \"antd/es/typography/Title\";\n\nconst Component = (props: QuestionInfoPropsType) => {\n  const { title, desc = \"\" } = {\n    ...QuestionInfoDefaultProps,\n    ...props,\n  };\n\n  const descTextList = desc.split(\"\\n\");\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <Title style={{ fontSize: \"24px\" }}>{title}</Title>\n      <Paragraph>\n        {descTextList.map((t, index) => (\n          <span key={index}>\n            {index > 0 && <br></br>}\n            {t}\n          </span>\n        ))}\n      </Paragraph>\n    </div>\n  );\n};\n\nexport default Component;\n","export type QuestionTextareaPropsType = {\n  title?: string;\n  placeholder?: string;\n  onchange?: (newProps: QuestionTextareaPropsType) => void;\n  disabled?: boolean;\n};\n\nexport const QuestionTextareaDefaultProps: QuestionTextareaPropsType = {\n  title: \"输入标题\",\n  placeholder: \"请输入...\",\n};\n","import Component from \"./Component\";\nimport { QuestionTextareaDefaultProps } from \"./interface\";\nimport PropComponent from \"./propComponent\";\nexport * from \"./interface\";\nconst QuestionTextareaConf = {\n  title: \"输入框\",\n  type: \"QuestionTextarea\",\n  PropComponent,\n  Component,\n  defaultProps: QuestionTextareaDefaultProps,\n};\nexport default QuestionTextareaConf;\n","import { Form, Input } from \"antd\";\nimport { QuestionTextareaPropsType } from \"./interface\";\nimport { useEffect } from \"react\";\nimport TextArea from \"antd/es/input/TextArea\";\n\nconst PropComponent = (props: QuestionTextareaPropsType) => {\n  const { title, placeholder, onchange, disabled } = props;\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({ title, placeholder });\n  }, [title, placeholder]);\n  function handleValueChange() {\n    if (onchange) {\n      onchange(form.getFieldsValue());\n    }\n  }\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ title, placeholder }}\n      onValuesChange={handleValueChange}\n      disabled={disabled}\n    >\n      <Form.Item\n        label=\"标题\"\n        name=\"title\"\n        rules={[{ required: true, message: \"请输入标题\" }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"placeholder\" name=\"placeholder\">\n        <TextArea />\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default PropComponent;\n","import Paragraph from \"antd/es/typography/Paragraph\";\nimport {\n  QuestionTextareaDefaultProps,\n  QuestionTextareaPropsType,\n} from \"./interface\";\nimport TextArea from \"antd/es/input/TextArea\";\n\nconst Component = (props: QuestionTextareaPropsType) => {\n  const { title = \"\", placeholder = \"\" } = {\n    ...QuestionTextareaDefaultProps,\n    ...props,\n  };\n  return (\n    <div>\n      <Paragraph strong>{title}</Paragraph>\n      <div>\n        <TextArea placeholder={placeholder} />\n      </div>\n    </div>\n  );\n};\nexport default Component;\n","export type optionType = {\n  value: string;\n  text: string;\n};\n\nexport type QuestionRadioPropsType = {\n  title?: string;\n  options?: optionType[];\n  isVertical?: boolean;\n  value?: string;\n\n  onchange?: (newProps: QuestionRadioPropsType) => void;\n  disabled?: boolean;\n};\n\nexport const QuestionRadioDefaultProps: QuestionRadioPropsType = {\n  title: \"单选标题\",\n  options: [\n    {\n      value: \"item1\",\n      text: \"选项1\",\n    },\n    {\n      value: \"item2\",\n      text: \"选项2\",\n    },\n    {\n      value: \"item3\",\n      text: \"选项3\",\n    },\n  ],\n  isVertical: false,\n  value: \"\",\n};\n\nexport type QuestionRadioStatPropsType = {\n  stat: Array<{ name: string; count: number }>;\n};\n","import { Button, Checkbox, Form, Input, Select, Space } from \"antd\";\nimport { useEffect } from \"react\";\nimport { QuestionRadioPropsType, optionType } from \"./interface\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\n\nconst PropComponent = (props: QuestionRadioPropsType) => {\n  const { title, options = [], isVertical, value, onchange, disabled } = props;\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({ title, options, isVertical, value });\n  }, [title, options, isVertical, value]);\n  function handleValueChange() {\n    if (onchange == null) return;\n    const newValues = form.getFieldsValue() as QuestionRadioPropsType;\n    if (newValues.options) {\n      newValues.options = newValues.options.filter(\n        (opt) => !(opt.text == null)\n      );\n    }\n    const { options = [] } = newValues;\n    options.forEach((opt) => {\n      if (opt.value) return;\n      opt.value = Math.random().toString(16).slice(-4);\n    });\n    onchange(newValues);\n  }\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ title, options, isVertical, value }}\n      onValuesChange={handleValueChange}\n      disabled={disabled}\n    >\n      <Form.Item\n        label=\"标题\"\n        name=\"title\"\n        rules={[{ required: true, message: \"请输入标题\" }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"选项\">\n        <Form.List name=\"options\">\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map(({ key, name }, index) => {\n                return (\n                  <Space key={key} align=\"baseline\">\n                    <Form.Item\n                      name={[name, \"text\"]}\n                      rules={[\n                        {\n                          required: true,\n                          message: \"请输入选项内容\",\n                        },\n                        {\n                          validator: (_, text) => {\n                            const { options = [] } = form.getFieldsValue();\n                            let num = 0;\n                            options.forEach((item: optionType) => {\n                              if (item.text === text) {\n                                num++;\n                              }\n                            });\n                            if (num === 1) return Promise.resolve();\n                            return Promise.reject(new Error(\"选项内容重复\"));\n                          },\n                        },\n                      ]}\n                    >\n                      <Input placeholder=\"请输入文字\"></Input>\n                    </Form.Item>\n                    {index > 0 && (\n                      <MinusCircleOutlined\n                        onClick={() => remove(name)}\n                      ></MinusCircleOutlined>\n                    )}\n                  </Space>\n                );\n              })}\n              <Form.Item>\n                <Button\n                  type=\"link\"\n                  onClick={() => add({ text: \"\", value: \"\" })}\n                  icon={<PlusOutlined></PlusOutlined>}\n                  block\n                >\n                  添加选项\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n      </Form.Item>\n      <Form.Item name=\"value\" label=\"默认选中\">\n        <Select\n          value={value}\n          options={options.map(({ text, value }) => ({\n            value,\n            label: text || \"\",\n          }))}\n        ></Select>\n      </Form.Item>\n      <Form.Item name=\"isVertical\" valuePropName=\"checked\">\n        <Checkbox>竖向排列</Checkbox>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default PropComponent;\n","import Component from \"./Component\";\nimport StatComponent from \"./StatComponent\";\nimport { QuestionRadioDefaultProps } from \"./interface\";\nimport PropComponent from \"./propComponent\";\nexport * from \"./interface\";\nconst QuestionRadioConf = {\n  title: \"单选\",\n  desc: \"问卷描述\",\n  type: \"QuestionRadio\",\n  PropComponent,\n  Component,\n  StatComponent,\n  defaultProps: QuestionRadioDefaultProps,\n};\nexport default QuestionRadioConf;\n","import Paragraph from \"antd/es/typography/Paragraph\";\nimport { QuestionRadioDefaultProps, QuestionRadioPropsType } from \"./interface\";\nimport { Radio, Space } from \"antd\";\n\nconst Component = (props: QuestionRadioPropsType) => {\n  const {\n    title,\n    options = [],\n    value,\n    isVertical,\n  } = { ...QuestionRadioDefaultProps, ...props };\n  return (\n    <div>\n      <Paragraph>{title}</Paragraph>\n      <Radio.Group value={value}>\n        <Space direction={isVertical ? \"vertical\" : \"horizontal\"}>\n          {options.map((opt) => {\n            const { value, text } = opt;\n            return (\n              <Radio value={value} key={value}>\n                {text}\n              </Radio>\n            );\n          })}\n        </Space>\n      </Radio.Group>\n    </div>\n  );\n};\nexport default Component;\n","import { Cell, Pie, PieChart, ResponsiveContainer, Tooltip } from \"recharts\";\nimport { QuestionRadioStatPropsType } from \"./interface\";\nimport { useMemo } from \"react\";\n\nconst StatComponent = (props: QuestionRadioStatPropsType) => {\n  const { stat = [] } = props;\n  function format(n: number) {\n    return (n * 100).toFixed(2);\n  }\n  const sum = useMemo(() => {\n    let s = 0;\n    stat.forEach((i) => {\n      s += i.count;\n    });\n    return s;\n  }, [stat]);\n  return (\n    <div style={{ width: \"300px\", height: \"400px\" }}>\n      <ResponsiveContainer width={\"100%\"} height={\"100%\"}>\n        <PieChart>\n          <Pie\n            dataKey=\"count\"\n            data={stat}\n            cx={\"50%\"}\n            cy={\"50%\"}\n            outerRadius={50}\n            fill=\"#8884d8\"\n            label={(i) => `${i.name}: ${format(i.count / sum)}%`}\n          >\n            {stat.map((i, index) => {\n              return <Cell key={index}></Cell>;\n            })}\n          </Pie>\n          <Tooltip></Tooltip>\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\nexport default StatComponent;\n","export type OptionType = {\n  value: string;\n  text: string;\n  checked: boolean;\n};\nexport type QuestionCheckPropsType = {\n  title?: string;\n  isVertical?: boolean;\n  list?: OptionType[];\n\n  onchange?: (newProps: QuestionCheckPropsType) => void;\n  disabled?: boolean;\n};\n\nexport const QuestionCheckboxDefaultProps: QuestionCheckPropsType = {\n  title: \"多选标题\",\n  isVertical: false,\n  list: [\n    {\n      value: \"item1\",\n      text: \"选项1\",\n      checked: false,\n    },\n    {\n      value: \"item2\",\n      text: \"选项2\",\n      checked: false,\n    },\n    {\n      value: \"item3\",\n      text: \"选项3\",\n      checked: false,\n    },\n  ],\n};\n\nexport type QuestionCheckStatPropsType = {\n  stat: Array<{ name: string; count: number }>;\n};\n","import {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { QuestionCheckStatPropsType } from \"./interface\";\nimport { useMemo } from \"react\";\n\nconst StatComponent = (props: QuestionCheckStatPropsType) => {\n  const { stat = [] } = props;\n\n  return (\n    <div style={{ width: \"300px\", height: \"400px\" }}>\n      <ResponsiveContainer width={\"100%\"} height={\"100%\"}>\n        <BarChart\n          width={400}\n          height={300}\n          data={stat}\n          margin={{ top: 5, right: 30, left: 0, bottom: 5 }}\n        >\n          <CartesianGrid strokeDasharray={\"3 3\"}></CartesianGrid>\n          <XAxis dataKey={\"name\"}></XAxis>\n          <YAxis></YAxis>\n          <Tooltip></Tooltip>\n          <Bar dataKey=\"count\" fill=\"#8884d8\"></Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\nexport default StatComponent;\n","import Component from \"./Component\";\nimport StatComponent from \"./StatComponent\";\nimport { QuestionCheckboxDefaultProps } from \"./interface\";\nimport PropComponent from \"./propComponent\";\nexport * from \"./interface\";\nconst QuestionCheckboxConf = {\n  title: \"多选\",\n  desc: \"问卷描述\",\n  type: \"QuestionCheckbox\",\n  PropComponent,\n  Component,\n  StatComponent,\n  defaultProps: QuestionCheckboxDefaultProps,\n};\nexport default QuestionCheckboxConf;\n","import { Button, Checkbox, Form, Input, Select, Space } from \"antd\";\nimport { useEffect } from \"react\";\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { OptionType, QuestionCheckPropsType } from \"./interface\";\n\nconst PropComponent = (props: QuestionCheckPropsType) => {\n  const { title, list = [], isVertical, onchange, disabled } = props;\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({ title, list, isVertical });\n  }, [title, list, isVertical]);\n  function handleValueChange() {\n    if (onchange == null) return;\n    const newValues = form.getFieldsValue() as QuestionCheckPropsType;\n    if (newValues.list) {\n      newValues.list = newValues.list.filter((opt) => !(opt.text == null));\n    }\n    const { list = [] } = newValues;\n    list.forEach((opt) => {\n      if (opt.value) return;\n      opt.value = Math.random().toString(16).slice(-4);\n    });\n    onchange(newValues);\n  }\n  return (\n    <Form\n      form={form}\n      layout=\"vertical\"\n      initialValues={{ title, list, isVertical }}\n      onValuesChange={handleValueChange}\n      disabled={disabled}\n    >\n      <Form.Item\n        label=\"标题\"\n        name=\"title\"\n        rules={[{ required: true, message: \"请输入标题\" }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item label=\"选项\">\n        <Form.List name=\"list\">\n          {(fields, { add, remove }) => (\n            <>\n              {fields.map(({ key, name }, index) => {\n                return (\n                  <Space key={key} align=\"baseline\">\n                    <Form.Item name={[name, \"checked\"]} valuePropName=\"checked\">\n                      <Checkbox></Checkbox>\n                    </Form.Item>\n                    <Form.Item\n                      name={[name, \"text\"]}\n                      rules={[\n                        {\n                          required: true,\n                          message: \"请输入选项内容\",\n                        },\n                        {\n                          validator: (_, text) => {\n                            const { list = [] } = form.getFieldsValue();\n                            let num = 0;\n                            list.forEach((item: OptionType) => {\n                              if (item.text === text) {\n                                num++;\n                              }\n                            });\n                            if (num === 1) return Promise.resolve();\n                            return Promise.reject(new Error(\"选项内容重复\"));\n                          },\n                        },\n                      ]}\n                    >\n                      <Input placeholder=\"请输入文字\"></Input>\n                    </Form.Item>\n                    {index > 0 && (\n                      <MinusCircleOutlined\n                        onClick={() => remove(name)}\n                      ></MinusCircleOutlined>\n                    )}\n                  </Space>\n                );\n              })}\n              <Form.Item>\n                <Button\n                  type=\"link\"\n                  onClick={() => add({ text: \"\", value: \"\", checked: false })}\n                  icon={<PlusOutlined></PlusOutlined>}\n                  block\n                >\n                  添加选项\n                </Button>\n              </Form.Item>\n            </>\n          )}\n        </Form.List>\n      </Form.Item>\n\n      <Form.Item name=\"isVertical\" valuePropName=\"checked\">\n        <Checkbox>竖向排列</Checkbox>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default PropComponent;\n","import Paragraph from \"antd/es/typography/Paragraph\";\nimport { Checkbox, Space } from \"antd\";\nimport {\n  QuestionCheckPropsType,\n  QuestionCheckboxDefaultProps,\n} from \"./interface\";\n\nconst Component = (props: QuestionCheckPropsType) => {\n  const {\n    title,\n    list = [],\n    isVertical,\n  } = { ...QuestionCheckboxDefaultProps, ...props };\n  return (\n    <div>\n      <Paragraph>{title}</Paragraph>\n      <Space direction={isVertical ? \"vertical\" : \"horizontal\"}>\n        {list.map((opt) => {\n          const { value, text, checked } = opt;\n          return (\n            <Checkbox key={value} value={value} checked={checked}>\n              {text}\n            </Checkbox>\n          );\n        })}\n      </Space>\n    </div>\n  );\n};\nexport default Component;\n","import QuestionInputConf, { QuestionInputPropsType } from \"./QuestionInput\";\nimport QuestionTitleConf, { QuestionTitlePropsType } from \"./QuestionTitle\";\nimport QuestionParagraphConf, {\n  QuestionParagraphType,\n} from \"./QuestionParagraph\";\nimport QuestionInfoConf, { QuestionInfoPropsType } from \"./QuestionInfo\";\nimport QuestionTextareaConf, {\n  QuestionTextareaPropsType,\n} from \"./QuestionTextarea\";\nimport QuestionRadioConf, {\n  QuestionRadioPropsType,\n  QuestionRadioStatPropsType,\n} from \"./QuestionRadio\";\nimport QuestionCheckboxConf, {\n  QuestionCheckPropsType,\n  QuestionCheckStatPropsType,\n} from \"./QuestionCheckbox\";\n\nexport type ComponentPropsType =\n  | QuestionInputPropsType &\n      QuestionTitlePropsType &\n      QuestionParagraphType &\n      QuestionInfoPropsType &\n      QuestionTextareaPropsType &\n      QuestionRadioPropsType &\n      QuestionCheckPropsType;\nexport type ComponentStatPropsType = QuestionRadioStatPropsType &\n  QuestionCheckStatPropsType;\nexport type ComponentConfType = {\n  title: string;\n  type: string;\n  Component: React.FC<ComponentPropsType>;\n  PropComponent: React.FC<ComponentPropsType>;\n  defaultProps: ComponentPropsType;\n  StatComponent?: React.FC<ComponentStatPropsType>;\n};\n\nexport const componentConfList: ComponentConfType[] = [\n  QuestionInputConf,\n  QuestionTitleConf,\n  QuestionParagraphConf,\n  QuestionInfoConf,\n  QuestionTextareaConf,\n  QuestionRadioConf,\n  QuestionCheckboxConf,\n];\nexport const componentConfGroup = [\n  {\n    groupId: \"textGroup\",\n    groupName: \"文本显示\",\n    components: [QuestionTitleConf, QuestionParagraphConf, QuestionInfoConf],\n  },\n  {\n    groupId: \"inputGroup\",\n    groupName: \"用户输入\",\n    components: [QuestionInputConf, QuestionTextareaConf],\n  },\n  {\n    groupId: \"chooseGroup\",\n    groupName: \"用户选择\",\n    components: [QuestionRadioConf, QuestionCheckboxConf],\n  },\n];\nexport function getComponentConfByType(type: string) {\n  return componentConfList.find((c) => c.type === type);\n}\n","import { useSelector } from \"react-redux\";\nimport { StateType } from \"../store\";\nimport { ComponentsStateType } from \"../store/componentsReducer\";\n\nexport function useGetComponentInfo() {\n  const components = useSelector<StateType>(\n    (state) => state.components.present\n  ) as ComponentsStateType;\n  const { componentList, selectedId, copiedComponent } = components;\n  const selectedComponent = componentList.find((c) => c.fe_id === selectedId);\n  return {\n    componentList,\n    selectedId,\n    copiedComponent,\n    selectedComponent,\n  };\n}\n","import { useSelector } from \"react-redux\";\nimport { StateType } from \"../store\";\nimport { PageInfoType } from \"../store/pageInfoReducer\";\n\nfunction useGetPageInfo() {\n  const pageInfo = useSelector<StateType>((state) => {\n\n    return state.pageInfo;\n  }) as PageInfoType;\n  return pageInfo;\n}\n\nexport default useGetPageInfo;\n","import { useEffect, useState } from \"react\";\nimport { getQuestionService } from \"../services/quetions\";\nimport { useParams } from \"react-router-dom\";\nimport { useRequest } from \"ahooks\";\nimport { useDispatch } from \"react-redux\";\nimport { resetComponents } from \"../store/componentsReducer\";\nimport { resetPageInfo } from \"../store/pageInfoReducer\";\n\nexport function useLoadQuestionData() {\n  const { id = \"\" } = useParams();\n  const dispatch = useDispatch();\n  // const [loading, setLoading] = useState(true);\n  // const [questionData, setQuestionData] = useState({});\n  // useEffect(() => {\n  //   async function fn() {\n  //     const data = await getQuestionService(id);\n  //     setQuestionData(() => data);\n  //     setLoading(() => false);\n  //   }\n  //   fn();\n  // }, []);\n\n  // return { loading, questionData };\n\n  // async function load() {\n  //   const data = await getQuestionService(id);\n  //   return data;\n  // }\n  // const { loading, data, error } = useRequest(load);\n  const { data, loading, error, run } = useRequest(\n    async (id: string) => {\n      if (!id) throw new Error(\"id is required\");\n      const { data } = await getQuestionService(id);\n      return data;\n    },\n    {\n      manual: true,\n    }\n  );\n\n  useEffect(() => {\n    if (!data) return;\n    const {\n      title = \"\",\n      desc = \"\",\n      js = \"\",\n      css = \"\",\n      isPublished = false,\n      componentList = [],\n    } = data;\n    let selectedId = \"\";\n    if (componentList.length > 0) {\n      selectedId = componentList[0].fe_id;\n    }\n    //把componentList存储到redux中\n    dispatch(\n      resetComponents({\n        componentList,\n        selectedId,\n        copiedComponent: null,\n      })\n    );\n    dispatch(resetPageInfo({ title, isPublished, desc, js, css }));\n  }, [data]);\n  useEffect(() => {\n    run(id);\n  }, [id]);\n  return { loading, error };\n}\n"],"names":["QuestionInputDefaultProps","title","placeholder","type","PropComponent","props","onchange","disabled","form","Form","useForm","useEffect","setFieldsValue","_jsxs","layout","initialValues","onValuesChange","getFieldsValue","children","_jsx","Item","label","name","rules","required","message","Input","Component","Paragraph","strong","defaultProps","QuestionTitleDefaultProps","text","lever","isCenter","level","Select","options","value","valuePropName","Checkbox","Title","style","textAlign","marginBottom","fontSize","genFontSize","QuestionParagraphDefaultProps","TextArea","textList","split","map","t","index","QuestionInfoDefaultProps","desc","descTextList","QuestionTextareaDefaultProps","QuestionRadioDefaultProps","isVertical","newValues","filter","opt","forEach","Math","random","toString","slice","List","fields","_ref","add","remove","_Fragment","_ref2","key","Space","align","validator","_","num","item","Promise","resolve","reject","Error","MinusCircleOutlined","onClick","Button","icon","PlusOutlined","block","_ref3","Radio","direction","StatComponent","stat","sum","useMemo","s","i","count","width","height","ResponsiveContainer","PieChart","Pie","dataKey","data","cx","cy","outerRadius","fill","concat","toFixed","Cell","Tooltip","QuestionCheckboxDefaultProps","list","checked","QuestionCheckboxConf","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","YAxis","Bar","componentConfList","QuestionInputConf","QuestionTitleConf","QuestionParagraphConf","QuestionInfoConf","QuestionTextareaConf","QuestionRadioConf","componentConfGroup","groupId","groupName","components","getComponentConfByType","find","c","useGetComponentInfo","useSelector","state","present","componentList","selectedId","copiedComponent","selectedComponent","fe_id","pageInfo","useLoadQuestionData","id","useParams","dispatch","useDispatch","loading","error","run","useRequest","async","getQuestionService","manual","js","css","isPublished","length","resetComponents","resetPageInfo"],"sourceRoot":""}